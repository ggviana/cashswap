{"version":3,"sources":["util/media-query.js","theme.js","util/formatNumber.js","components/Balances/BalanceDisplay.js","components/Balances/index.js","components/Card/index.js","components/Container/index.js","components/CurrencyInput/index.js","components/CurrencySelector/index.js","components/CurrencySwap/index.js","components/ExchangeRate/index.js","components/Header/index.js","components/Page/index.js","services/Balance/BalanceService.js","services/Balance/index.js","hooks/useBalances.js","pages/Dashboard.js","pages/Exchange.js","hooks/useSwitchCurrencies.js","hooks/useExchangeRate.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["addConditionalRule","mediaQuery","when","conditional","color","media","breakpoints","onlySizes","xs","sm","md","lg","Object","keys","reduce","acc","size","boundaries","map","value","i","filter","join","css","up","down","createMediaQueries","GlobalStyles","createGlobalStyle","formatNumber","numeral","format","StyledDisplay","styled","div","BalanceDisplay","balance","integer","parseInt","amount","cents","symbol","replace","code","name","StyledBalances","Balances","values","draggable","key","Card","Container","StyledCurrencyInput","CurrencyInput","currentCurrency","onValueChange","onCurrencySelect","currencies","type","other","className","onChange","placeholder","min","onKeyPress","e","which","keyCode","preventDefault","stopPropagation","CurrencySelector","balances","except","Select","select","options","event","target","label","StyledSpan","span","CurrencySwap","onSwap","onClick","StyledPanel","ExchangeRate","from","to","rate","StyledHeader","header","Header","src","logo","alt","StyledPage","Page","children","path","exact","render","BalanceService","initialBalances","JSON","parse","window","localStorage","getItem","getFromStorage","this","saveOnStorage","merge","CURRENCIES","includes","Error","getRate","Promise","resolve","setTimeout","fetch","request","json","result","rates","setItem","stringify","BalanceContext","createContext","undefined","useBalances","useContext","Dashboard","isLoadingBalances","shape","icon","style","maxWidth","width","Exchange","refreshBalances","useState","isSubmitting","setSubmitting","input","setInput","output","setOutput","currency0","currency1","setFrom","setTo","toggle","useSwitchCurrencies","setRate","useEffect","then","useExchangeRate","clearInputs","isInvalid","justify","exchange","finally","loading","disabled","App","setBalances","refresh","useCallback","fetchBalances","useBalanceProvider","Provider","basename","Boolean","location","hostname","match","ReactDOM","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"w1BAyDA,SAASA,EAAoBC,GAC3BA,EAAWC,KAAO,SAAAC,GAAW,OAAIA,EAAcF,EAAa,iBAAM,K,+eCtD7D,IAAMG,EACC,UADDA,EAEF,UAFEA,EAML,UAUKC,EDlBE,SAA6BC,GAC1C,IAAMD,EAAQ,GAERE,EAAY,CAChBC,GAAI,CAAC,KAAMF,EAAYG,GAAK,GAC5BA,GAAI,CAACH,EAAYG,GAAIH,EAAYI,GAAK,GACtCA,GAAI,CAACJ,EAAYI,GAAIJ,EAAYK,GAAK,GACtCA,GAAI,CAACL,EAAYK,GAAI,OA6CvB,OA1CAC,OAAOC,KAAKN,GAAWO,QAAO,SAACC,EAAKC,GAClC,IAAMC,EAAaV,EAAUS,GAC1BE,KAAI,SAACC,EAAOC,GACX,OAAID,EACW,IAANC,EAAA,sBAAyBD,EAAzB,6BAAqDA,EAArD,OAGF,QAERE,QAAO,SAAAF,GAAK,MAAqB,kBAAVA,KACvBG,KAAK,SAUR,OARAP,EAAIC,GAAQ,kBAAaO,YAAZ,IACFN,EACLM,IAAG,WAAH,eAINvB,EAAmBe,EAAIC,IAEhBD,IACNV,GAEHO,OAAOC,KAAKP,GAAaQ,QAAO,SAACC,EAAKC,GAgBpC,OAfAD,EAAIC,GAAMQ,GAAK,kBAAaD,YAAZ,IACOjB,EAAYU,GAC7BO,IAAG,WAAH,eAINR,EAAIC,GAAMS,KAAO,kBAAaF,YAAZ,IACKjB,EAAYU,GAC7BO,IAAG,WAAH,eAINvB,EAAmBe,EAAIC,GAAMQ,IAC7BxB,EAAmBe,EAAIC,GAAMS,MAEtBV,IACNV,GAEIA,EClCYqB,CAPA,CACnBlB,GAAI,IACJC,GAAI,IACJC,GAAI,IACJC,GAAI,OAKOgB,EAAeC,YAAH,K,iCCpBV,SAASC,EAAcV,GACpC,OAAOW,IAAQX,GAAOY,OAAO,Y,wXCC/B,IAAMC,EAAgBC,IAAOC,IAAV,KAmBJ,SAASC,EAAT,GAAuC,IAAZC,EAAW,EAAXA,QAClCC,EAAUC,SAASF,EAAQG,QAC3BC,EAAQJ,EAAQG,OAASF,EAE/B,OACE,kBAACL,EAAD,KACE,6BACE,8BAAOI,EAAQK,OAAf,IAAwBJ,GACxB,8BAAOR,EAAaW,GAAOE,QAAQ,OAAQ,MAC3C,6BAAMN,EAAQO,KAAd,MAAuBP,EAAQQ,Q,+dC3BvC,IAAMC,EAAiBZ,IAAOC,IAAV,KAwBL,SAASY,EAAT,GAAgC,IAAXC,EAAU,EAAVA,OAClC,OACE,kBAACF,EAAD,KACE,kBAAC,IAAD,CAAUG,WAAS,GAChBpC,OAAOmC,OAAOA,GAAQ7B,KAAI,SAAAkB,GAAO,OAChC,kBAACD,EAAD,CAAgBC,QAASA,EAASa,IAAKb,EAAQO,Y,8JChCzD,IAOeO,EAPFjB,IAAOC,IAAV,K,0iBCCV,IAaeiB,EAbGlB,IAAOC,IAAV,IAOX7B,EAAMG,GAAGgB,GAPE,KAQXnB,EAAMI,GAAGe,GARE,KASXnB,EAAMK,GAAGc,GATE,KAUXnB,EAAMM,GAAGa,GAVE,M,yzBCIf,IAAM4B,EAAsBnB,IAAOC,IAAV,IACH9B,EAMFA,GA4BL,SAASiD,EAAT,GAA+G,IAArFC,EAAoF,EAApFA,gBAAiBnC,EAAmE,EAAnEA,MAAOoC,EAA4D,EAA5DA,cAAeC,EAA6C,EAA7CA,iBAAwBC,GAAqB,EAA3BC,KAA2B,EAArBD,YAAYE,EAAS,EAATA,MAClH,OACE,kBAACP,EAAD,KACE,yBAAKQ,UAAU,QACb,6BACGN,EAAgBV,MAEnB,yCACYf,EAAayB,EAAgBf,QAAQ,+BAGnD,yBAAKqB,UAAU,QACb,kBAAC,IAAD,CACEzC,MAAOA,EACP0C,SAAUN,EACVO,YAAY,OACZC,IAAK,EACLC,WAAY,SAAAC,GAIO,MAHAA,EAAEC,MAAQD,EAAEC,MAAQD,EAAEE,WAIrCF,EAAEG,iBACFH,EAAEI,sBAKR,kBAACC,EAAD,CACEC,SAAUd,EACVe,OAAQb,EACRxC,MAAOmC,EAAgBX,KACvBkB,SAAUL,M,0WCtEpB,IAAMiB,EAASxC,IAAOyC,OAAV,IAEUtE,EAWFA,GAIL,SAASkE,EAAT,GAAmE,IAAtCE,EAAqC,EAArCA,OAAQD,EAA6B,EAA7BA,SAAUpD,EAAmB,EAAnBA,MAAO0C,EAAY,EAAZA,SAC7Dc,EAAU/D,OAAOmC,OAAOwB,GAAUlD,QAAO,SAAAe,GAAO,OAAIA,EAAQO,OAAS6B,KAE3E,OACE,kBAACC,EAAD,CAAQtD,MAAOA,EAAO0C,SAAU,SAAAe,GAAK,OAAIf,EAASe,EAAMC,OAAO1D,SAC5DwD,EAAQzD,KAAI,SAAAkB,GAAO,OAClB,4BAAQjB,MAAOiB,EAAQO,KAAMM,IAAKb,EAAQO,KAAMmC,MAAO1C,EAAQO,MAC5DP,EAAQO,U,4KCzBnB,IAAMoC,EAAa9C,IAAO+C,KAAV,KAQD,SAASC,EAAT,GAAoC,IAAXC,EAAU,EAAVA,OACtC,OACE,kBAACH,EAAD,CAAYI,QAASD,GAArB,U,+LCTJ,IAAME,EAAcnD,IAAOC,IAAV,KAQF,SAASmD,EAAT,GAA4C,IAAnBC,EAAkB,EAAlBA,KAAMC,EAAY,EAAZA,GAAIC,EAAQ,EAARA,KAChD,OACE,kBAACJ,EAAD,KACE,iDACA,8BAAOE,EAAK7C,OAAZ,OAAwB8C,EAAG9C,OAAQZ,EAAa2D,K,ubCTtD,IAAMC,GAAexD,IAAOyD,OAAV,KAOLtF,EAOT+C,GAYW,SAASwC,KACtB,OACE,kBAACF,GAAD,KACE,kBAAC,EAAD,KACE,kBAAC,IAAD,CAAMF,GAAG,KACP,yBAAKK,IAAKC,IAAMC,IAAI,aACpB,2C,qNCnCV,IAAMC,GAAa9D,IAAOC,IAAV,MAWD,SAAS8D,GAAT,GAA2D,IAA1CC,EAAyC,EAAzCA,SAAUC,EAA+B,EAA/BA,KAA+B,IAAzBC,aAAyB,SAAVC,EAAU,EAAVA,OAC7D,OACE,kBAAC,KAAD,CACEF,KAAMA,EAAMC,MAAOA,EAAOC,OAAQ,kBAChC,kBAACL,GAAD,KACE,8BACqB,oBAAXK,EAAwBA,EAAM,WAAN,aAAkBH,O,2ECnBzCI,G,WACnB,WAAaC,GAAkB,qBAC7B,IAAM/B,EAgDV,WACE,IAEE,OADiBgC,KAAKC,MAAMC,OAAOC,aAAaC,QAAQ,aAExD,MAAO1C,GACP,OAAO,MArDU2C,GACjBC,KAAKtC,SAAWA,GAAY+B,EAC5BQ,GAAcD,KAAKtC,U,yJAIZwC,KAAM,GAAIF,KAAKtC,W,qKAGNe,E,EAAAA,KAAMC,E,EAAAA,GAAIhD,E,EAAAA,OACrB8D,EAAeW,WAAWC,SAAS3B,G,sBAChC,IAAI4B,MAAJ,2CAA8C5B,I,UAC1Ce,EAAeW,WAAWC,SAAS1B,G,sBACvC,IAAI2B,MAAJ,2CAA8C3B,I,YAGlDhD,EAASsE,KAAKtC,SAASe,GAAM/C,Q,sBACzB,IAAI2E,MAAM,uB,mCAGCL,KAAKM,QAAQ,CAAE7B,OAAMC,Q,eAAlCC,E,OAENqB,KAAKtC,SAASe,GAAM/C,QAAUA,EAC9BsE,KAAKtC,SAASgB,GAAIhD,QAAUA,EAASiD,EACrCsB,GAAcD,KAAKtC,U,qBAGb,IAAI6C,SAAQ,SAAAC,GAAO,OAAIZ,OAAOa,WAAWD,EAAS,S,qKAGzC/B,E,EAAAA,KAAMC,E,EAAAA,GAChBc,EAAeW,WAAWC,SAAS3B,G,sBAChC,IAAI4B,MAAJ,2CAA8C5B,I,UAC1Ce,EAAeW,WAAWC,SAAS1B,G,sBACvC,IAAI2B,MAAJ,2CAA8C3B,I,UAC3CD,IAASC,E,0CACX,G,oCAGagC,MAAM,+CAAD,OAAgDjC,K,eAArEkC,E,4BACeA,EAAQC,Q,eAAvBC,E,yBAECA,EAAOC,MAAMpC,I,+CAexB,SAASuB,GAAevC,GACtBkC,OAAOC,aAAakB,QAAQ,WAAYrB,KAAKsB,UAAUtD,IAZzD8B,GAAeW,WAAa,CAAC,MAAO,MAAO,OC/C5B,WAAIX,GAAeC,ICArBwB,GAAiBC,6BAAcC,GAc7B,SAASC,KACtB,OAAOC,qBAAWJ,I,wBCZL,SAASK,KAAc,IAAD,EACGF,KADH,mBAC5B1D,EAD4B,KAClB6D,EADkB,KAGnC,OACE,kBAACpC,GAAD,CAAME,KAAK,IAAIC,OAAK,GAClB,kBAAC,EAAD,KACE,kBAAC,EAAD,KACGiC,EACC,kBAAC,KAAD,MAEA,kBAACtF,EAAD,CAAUC,OAAQwB,IAEpB,kBAAC,IAAD,CAAMgB,GAAG,YAAY3B,UAAU,mBAC7B,kBAAC,KAAD,CACEF,KAAK,UACL2E,MAAM,QACNC,KAAK,OACLtH,KAAK,QACLuH,MAAO,CAAEC,SAAU,IAAKC,MAAO,SALjC,gB,wBCXG,SAASC,KAAa,IAAD,EACqBT,KADrB,mBAC3B1D,EAD2B,KACjB6D,EADiB,KACEO,EADF,OAEIC,oBAAS,GAFb,mBAE3BC,EAF2B,KAEbC,EAFa,OAGRF,mBAAS,IAHD,mBAG3BG,EAH2B,KAGpBC,EAHoB,OAINJ,mBAAS,IAJH,mBAI3BK,EAJ2B,KAInBC,EAJmB,OCNrB,SAA8BC,EAAWC,GAAY,IAAD,EACzCR,mBAASO,GADgC,mBAC1D7D,EAD0D,KACpD+D,EADoD,OAE7CT,mBAASQ,GAFoC,mBAE1D7D,EAF0D,KAEtD+D,EAFsD,KASjE,MAAO,CAAEhE,OAAM+D,UAAS9D,KAAI+D,QAAOC,OALpB,WACbF,EAAQ9D,GACR+D,EAAMhE,KDKqCkE,CAAoB,MAAO,OAAhElE,EAL0B,EAK1BA,KAAM+D,EALoB,EAKpBA,QAAS9D,EALW,EAKXA,GAAI+D,EALO,EAKPA,MAAOC,EALA,EAKAA,OAC5B/D,EEXO,SAA0BF,EAAMC,GAAK,IAAD,EACzBqD,mBAAS,MADgB,mBAC1CpD,EAD0C,KACpCiE,EADoC,KAOjD,OAJAC,qBAAU,WACRrD,GAAec,QAAQ,CAAE7B,OAAMC,OAAMoE,KAAKF,KACzC,CAACnE,EAAMC,IAEHC,EFIMoE,CAAgBtE,EAAMC,GAE7BsE,EAAc,WAClBb,EAAS,IACTE,EAAU,KAGNY,EAA8B,kBAAVf,GAAgC,IAAVA,GAAgBA,EAAQxE,EAASe,GAAM/C,OAavF,OACE,kBAACyD,GAAD,CAAME,KAAK,aACT,kBAAC,EAAD,KACE,kBAAC,IAAD,CAAMX,GAAG,KACP,kBAAC,KAAD,CAAQ7B,KAAK,SACX,kBAAC,KAAD,CAAMA,KAAK,SADb,SAKF,kBAAC,EAAD,KACG0E,EACC,kBAAC,KAAD,MAEA,oCACE,kBAAC/E,EAAD,CACEC,gBAAiBiB,EAASe,GAC1BnE,MAAO4H,EACPxF,cAAe,SAAAwF,GACQ,kBAAVA,EACTc,KAEAb,EAASD,GACTG,EAAUrH,EAAa2D,EAAOuD,MAGlCvF,iBAAkB,SAAAb,GAChB0G,EAAQ1G,GACR0D,GACGc,QAAQ,CAAE7B,KAAM3C,EAAM4C,OACtBoE,MAAK,SAAAnE,GACJ0D,EAAUrH,EAAa2D,EAAOuD,QAGpCtF,WAAYc,EACZZ,MAAO4B,IAGT,kBAACN,EAAD,CACEC,OAAQ,WACNqE,IACAlD,GACGc,QAAQ,CAAE7B,KAAMC,EAAIA,GAAID,IACxBqE,MAAK,SAAAnE,GACJ0D,EAAUrH,EAAa2D,EAAOuD,UAKtC,kBAAC1F,EAAD,CACEC,gBAAiBiB,EAASgB,GAC1BpE,MAAO8H,EACP1F,cAAe,SAAA0F,GACS,kBAAXA,EACTY,KAEAX,EAAUD,GACVD,EAASnH,EAAaoH,EAASzD,MAGnChC,iBAAkB,SAAAb,GAChB2G,EAAM3G,GACN0D,GACGc,QAAQ,CAAE7B,OAAMC,GAAI5C,IACpBgH,MAAK,SAAAnE,GACJwD,EAASnH,EAAaoH,EAASzD,QAGrC/B,WAAYc,EACZZ,MAAO2B,IAGT,kBAACD,EAAD,CACEC,KAAMf,EAASe,GACfC,GAAIhB,EAASgB,GACbC,KAAM3D,EAAa2D,KAGrB,kBAAC,KAAD,CAAK9B,KAAK,OAAOqG,QAAQ,UACvB,kBAAC,KAAD,CACErG,KAAK,UACL1C,KAAK,QACLqH,MAAM,QACNlD,QA7FO,WAChB2E,IACHhB,GAAc,GACdzC,GACG2D,SAAS,CAAE1E,OAAMC,KAAIhD,OAAQwG,IAC7BY,KAAKhB,GACLgB,KAAKE,GACLI,SAAQ,kBAAMnB,GAAc,QAuFnBoB,QAASrB,EACTsB,SAAUL,EACVvB,MAAO,CAAEC,SAAU,IAAKC,MAAO,SAPjC,aGxFD2B,OAjBf,WACE,IAAM7F,ELH0B,WAAO,IAAD,EACNqE,mBAAS,MADH,mBAC/BrE,EAD+B,KACrB8F,EADqB,KAGhCC,EAAUC,uBAAY,WAC1BlE,GAAemE,gBAAgBb,KAAKU,KACnC,IAIH,OAFAX,oBAAUY,EAAS,CAACA,IAEb,CAAC/F,EAAuB,OAAbA,EAAmB+F,GKNpBG,GAEjB,OACE,oCACE,kBAAC9I,EAAD,MACA,kBAACmG,GAAe4C,SAAhB,CAAyBvJ,MAAOoD,GAC9B,kBAAC,IAAD,CAAQoG,SAAS,aACf,kBAAChF,GAAD,MACA,kBAAC+C,GAAD,MACA,kBAACP,GAAD,UCLUyC,QACW,cAA7BnE,OAAOoE,SAASC,UAEe,UAA7BrE,OAAOoE,SAASC,UAEhBrE,OAAOoE,SAASC,SAASC,MACvB,2DCXNC,IAAS5E,OAAO,kBAAC,GAAD,MAAS6E,SAASC,eAAe,SD4H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM1B,MAAK,SAAA2B,GACjCA,EAAaC,iB,mBErInBC,EAAOC,QAAU,IAA0B,mC","file":"static/js/main.466efac4.chunk.js","sourcesContent":["import { css } from 'styled-components'\n\nexport default function createMediaQueries (breakpoints) {\n  const media = {}\n\n  const onlySizes = {\n    xs: [null, breakpoints.sm - 1],\n    sm: [breakpoints.sm, breakpoints.md - 1],\n    md: [breakpoints.md, breakpoints.lg - 1],\n    lg: [breakpoints.lg, null]\n  }\n\n  Object.keys(onlySizes).reduce((acc, size) => {\n    const boundaries = onlySizes[size]\n      .map((value, i) => {\n        if (value) {\n          return i === 0 ? `(min-width: ${value}px)` : `(max-width: ${value}px)`\n        }\n\n        return null\n      })\n      .filter(value => typeof value === 'string')\n      .join(' and ')\n\n    acc[size] = (...args) => css`\n      @media ${boundaries} {\n        ${css(...args)}\n      }\n    `\n\n    addConditionalRule(acc[size])\n\n    return acc\n  }, media)\n\n  Object.keys(breakpoints).reduce((acc, size) => {\n    acc[size].up = (...args) => css`\n      @media (min-width: ${breakpoints[size]}px) {\n        ${css(...args)}\n      }\n    `\n\n    acc[size].down = (...args) => css`\n      @media (max-width: ${breakpoints[size]}px) {\n        ${css(...args)}\n      }\n    `\n\n    addConditionalRule(acc[size].up)\n    addConditionalRule(acc[size].down)\n\n    return acc\n  }, media)\n\n  return media\n}\n\nfunction addConditionalRule (mediaQuery) {\n  mediaQuery.when = conditional => conditional ? mediaQuery : () => ''\n}\n","import { createGlobalStyle } from 'styled-components'\nimport createMediaQueries from 'util/media-query'\n\n// Colors\nexport const color = {\n  background: '#324a5e',\n  primary: '#3498db',\n  success: '#2ecc71',\n  danger: '#e74c3c',\n  warning: '#f1c40f',\n  grey: '#e1e1e1'\n}\n\nexport const sizes = {\n  xs: 576,\n  sm: 768,\n  md: 992,\n  lg: 1280\n}\n\nexport const media = createMediaQueries(sizes)\n\nexport const GlobalStyles = createGlobalStyle`\n  html {\n    font-family: 'Source Sans Pro', sans-serif;\n    font-size: 16px;\n    color: rgb(1, 1, 1);\n  }\n  \n  body {\n    width: 100%;\n    height: 100%;\n    margin: 0;\n    padding: 0;\n    overflow: hidden;\n    font-family: inherit;\n    \n    & > div {\n      height: 100%;\n      overflow: auto;\n    }\n  }\n  \n  .exchange-button {\n    display: block;\n    margin: 10px auto;\n    text-align: center;\n  }\n`\n","import numeral from 'numeral'\n\nexport default function formatNumber (value) {\n  return numeral(value).format('0.00[00]')\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport formatNumber from 'util/formatNumber'\n\nconst StyledDisplay = styled.div`\n  height: 250px;\n  margin: 0 auto;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  text-align: center;\n  text-shadow: 1px 1px 4px rgba(150, 150, 150, 1);\n  user-select: none;\n  \n  span {\n    font-size: 30px;\n    \n    &:first-child {\n      font-size: 50px;  \n    }\n  }\n`\n\nexport default function BalanceDisplay ({ balance }) {\n  const integer = parseInt(balance.amount)\n  const cents = balance.amount - integer\n\n  return (\n    <StyledDisplay>\n      <div>\n        <span>{balance.symbol} {integer}</span>\n        <span>{formatNumber(cents).replace(/^0\\./, '.')}</span>\n        <div>{balance.code} - {balance.name}</div>\n      </div>\n    </StyledDisplay>\n  )\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Carousel } from 'antd'\nimport BalanceDisplay from './BalanceDisplay'\n\nconst StyledBalances = styled.div`\n  background-color: #21D4FD;\n  background-image: linear-gradient(19deg, #21D4FD 0%, #B721FF 100%);\n  border-radius: 6px;\n  \n  .ant-carousel {\n    color: white;\n    \n    .slick-dots {\n      margin-bottom: 20px;\n      \n      li {\n        margin: 0 5px;\n        \n        button {\n          border-radius: 50%;\n          height: 10px;\n          width: 10px;\n        }     \n      }\n    }\n  }\n`\n\nexport default function Balances ({ values }) {\n  return (\n    <StyledBalances>\n      <Carousel draggable>\n        {Object.values(values).map(balance => (\n          <BalanceDisplay balance={balance} key={balance.code} />\n        ))}\n      </Carousel>\n    </StyledBalances>\n  )\n}\n","import styled from 'styled-components'\n\nconst Card = styled.div`\n  margin: 0 auto;\n  max-width: 512px;\n  padding-bottom: 20px;\n  padding-top: 20px;\n`\n\nexport default Card\n","import styled from 'styled-components'\nimport { media } from 'theme'\n\nconst Container = styled.div`\n  padding-right: 15px;\n  padding-left: 15px;\n  margin-right: auto;\n  margin-left: auto;\n  width: 100%;\n\n  ${media.xs.up`max-width: 540px;`}\n  ${media.sm.up`max-width: 720px;`}\n  ${media.md.up`max-width: 960px;`}\n  ${media.lg.up`max-width: 1140px;`}\n`\n\nexport default Container\n","import React from 'react'\nimport styled from 'styled-components'\nimport formatNumber from 'util/formatNumber'\nimport { CurrencySelector } from 'components'\nimport { color } from 'theme'\nimport InputNumber from 'rc-input-number'\n\nconst StyledCurrencyInput = styled.div`\n  border: 1px solid ${color.grey};\n  border-radius: 25px;\n  box-shadow: 2px 2px 5px 0 rgba(0, 0, 0, 0.1);\n  transition: 300ms;\n  \n  &:focus-within {\n    border-color: ${color.primary};\n  }\n  \n  input {\n    border: none;\n    flex-grow: 1;\n    font-size: 1.5rem;\n    outline: 0;\n    width: 100%;\n    -moz-appearance: textfield;\n    \n    &::-webkit-outer-spin-button,\n    &::-webkit-inner-spin-button {\n      /* display: none; <- Crashes Chrome on hover */\n      -webkit-appearance: none;\n      margin: 0; /* <-- Apparently some margin are still there even though it's hidden */\n    }\n  }\n  \n  .flex {\n    align-items: baseline;\n    display: flex;\n    justify-content: space-between;\n    font-size: 0.75rem;\n    padding: 0.75rem 1rem;\n  }\n`\n\nexport default function CurrencyInput ({ currentCurrency, value, onValueChange, onCurrencySelect, type, currencies, other }) {\n  return (\n    <StyledCurrencyInput>\n      <div className='flex'>\n        <div>\n          {currentCurrency.name}\n        </div>\n        <div>\n          Balance: {formatNumber(currentCurrency.amount)}<br />\n        </div>\n      </div>\n      <div className='flex'>\n        <InputNumber\n          value={value}\n          onChange={onValueChange}\n          placeholder='0.00'\n          min={0}\n          onKeyPress={e => {\n            const charCode = e.which ? e.which : e.keyCode\n\n            // Prevent 'minus' character\n            if (charCode === 45) {\n              e.preventDefault()\n              e.stopPropagation()\n            }\n          }}\n        />\n\n        <CurrencySelector\n          balances={currencies}\n          except={other}\n          value={currentCurrency.code}\n          onChange={onCurrencySelect}\n        />\n      </div>\n    </StyledCurrencyInput>\n  )\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport { color } from 'theme'\n\nconst Select = styled.select`\n  background-color: white;\n  border: 1px solid ${color.grey};\n  border-radius: 25px;\n  font-size: 1rem;\n  padding: 5px 20px;\n  /* for Firefox */\n  -moz-appearance: none;\n  /* for Chrome */\n  -webkit-appearance: none;\n  outline: 0;\n  //width: 50px;\n  &:focus {\n    border-color: ${color.primary};\n  }\n`\n\nexport default function CurrencySelector ({ except, balances, value, onChange }) {\n  const options = Object.values(balances).filter(balance => balance.code !== except)\n\n  return (\n    <Select value={value} onChange={event => onChange(event.target.value)}>\n      {options.map(balance => (\n        <option value={balance.code} key={balance.code} label={balance.code}>\n          {balance.code}\n        </option>\n      ))}\n    </Select>\n  )\n}\n","import React from 'react'\nimport styled from 'styled-components'\n\nconst StyledSpan = styled.span`\n  display: block;\n  cursor: pointer;\n  font-size: 24px;\n  text-align: center;\n  padding: 5px 0;\n`\n\nexport default function CurrencySwap ({ onSwap }) {\n  return (\n    <StyledSpan onClick={onSwap}>↓</StyledSpan>\n  )\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport formatNumber from 'util/formatNumber'\n\nconst StyledPanel = styled.div`\n  display: flex;\n  font-size: 0.75rem;\n  justify-content: space-between;\n  padding: 0 15px;\n  margin: 10px 0 30px;\n`\n\nexport default function ExchangeRate ({ from, to, rate }) {\n  return (\n    <StyledPanel>\n      <span>Exchange rate: </span>\n      <span>{from.symbol}1 = {to.symbol}{formatNumber(rate)}</span>\n    </StyledPanel>\n  )\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Container } from 'components'\nimport { Link } from 'react-router-dom'\nimport logo from '../../logo.svg'\nimport { color } from 'theme'\n\nconst StyledHeader = styled.header`\n  img {\n    max-width: 26px;\n    display: inline-block;\n  }\n  \n  h1 {\n    color: ${color.background};\n    display: inline-block;\n    font-size: 16px;\n    font-weight: lighter;\n    margin: 0 10px;\n  }\n  \n  ${Container} {\n    display: flex;\n    align-items: center;\n    padding: 20px 15px;\n    user-select: none;\n  }\n  \n  a {\n    display: flex;\n  }\n`\n\nexport default function Header () {\n  return (\n    <StyledHeader>\n      <Container>\n        <Link to='/'>\n          <img src={logo} alt='Cashswap' />\n          <h1>Cashswap</h1>\n        </Link>\n      </Container>\n    </StyledHeader>\n  )\n}\n","import React from 'react'\nimport styled from 'styled-components'\nimport { Route } from 'react-router-dom'\n\nconst StyledPage = styled.div`\n  display: flex;\n  flex-direction: column;\n  min-height: 100vh;\n  \n  main {\n    flex-grow: 1;\n    padding: 30px 0;\n  }\n`\n\nexport default function Page ({ children, path, exact = false, render }) {\n  return (\n    <Route\n      path={path} exact={exact} render={(...args) => (\n        <StyledPage>\n          <main>\n            {typeof render === 'function' ? render(...args) : children}\n          </main>\n        </StyledPage>\n      )}\n    />\n  )\n}\n","import merge from 'lodash.merge'\n\nexport default class BalanceService {\n  constructor (initialBalances) {\n    const balances = getFromStorage()\n    this.balances = balances || initialBalances\n    saveOnStorage(this.balances)\n  }\n\n  async fetchBalances () {\n    return merge({}, this.balances)\n  }\n\n  async exchange ({ from, to, amount }) {\n    if (!BalanceService.CURRENCIES.includes(from)) {\n      throw new Error(`Currency not available. Received ${from}`)\n    } else if (!BalanceService.CURRENCIES.includes(to)) {\n      throw new Error(`Currency not available. Received ${to}`)\n    }\n\n    if (amount > this.balances[from].amount) {\n      throw new Error('Not enough balance.')\n    }\n\n    const rate = await this.getRate({ from, to })\n\n    this.balances[from].amount -= amount\n    this.balances[to].amount += amount * rate\n    saveOnStorage(this.balances)\n\n    // Simulating a small server delay\n    await new Promise(resolve => window.setTimeout(resolve, 2000))\n  }\n\n  async getRate ({ from, to }) {\n    if (!BalanceService.CURRENCIES.includes(from)) {\n      throw new Error(`Currency not available. Received ${from}`)\n    } else if (!BalanceService.CURRENCIES.includes(to)) {\n      throw new Error(`Currency not available. Received ${to}`)\n    } else if (from === to) {\n      return 1\n    }\n\n    const request = await fetch(`https://api.exchangeratesapi.io/latest?base=${from}`)\n    const result = await request.json()\n\n    return result.rates[to]\n  }\n}\n\nBalanceService.CURRENCIES = ['USD', 'EUR', 'GBP']\n\nfunction getFromStorage () {\n  try {\n    const balances = JSON.parse(window.localStorage.getItem('balances'))\n    return balances\n  } catch (e) {\n    return null\n  }\n}\n\nfunction saveOnStorage (balances) {\n  window.localStorage.setItem('balances', JSON.stringify(balances))\n}\n","import initialBalances from './initial-balances'\nimport BalanceService from './BalanceService'\n\nexport default new BalanceService(initialBalances)\n","import { useEffect, useState, createContext, useContext, useCallback } from 'react'\nimport BalanceService from 'services/Balance'\n\nexport const BalanceContext = createContext(undefined)\n\nexport const useBalanceProvider = () => {\n  const [balances, setBalances] = useState(null)\n\n  const refresh = useCallback(() => {\n    BalanceService.fetchBalances().then(setBalances)\n  }, [])\n\n  useEffect(refresh, [refresh])\n\n  return [balances, balances === null, refresh]\n}\n\nexport default function useBalances () {\n  return useContext(BalanceContext)\n}\n","import React from 'react'\nimport { Balances, Card, Container, Page } from 'components'\nimport { Link } from 'react-router-dom'\nimport useBalances from 'hooks/useBalances'\nimport { Button, Spin } from 'antd'\n\nexport default function Dashboard () {\n  const [balances, isLoadingBalances] = useBalances()\n\n  return (\n    <Page path='/' exact>\n      <Container>\n        <Card>\n          {isLoadingBalances ? (\n            <Spin />\n          ) : (\n            <Balances values={balances} />\n          )}\n          <Link to='/exchange' className='exchange-button'>\n            <Button\n              type='primary'\n              shape='round'\n              icon='swap'\n              size='large'\n              style={{ maxWidth: 300, width: '100%' }}\n            >\n              Exchange\n            </Button>\n          </Link>\n        </Card>\n      </Container>\n    </Page>\n  )\n}\n","import React, { useState } from 'react'\nimport { Link } from 'react-router-dom'\nimport { Card, Container, CurrencyInput, CurrencySwap, ExchangeRate, Page } from 'components'\nimport { useBalances, useExchangeRate, useSwitchCurrencies } from 'hooks'\nimport BalanceService from 'services/Balance'\nimport formatNumber from 'util/formatNumber'\nimport { Button, Icon, Row, Spin } from 'antd'\n\nexport default function Exchange () {\n  const [balances, isLoadingBalances, refreshBalances] = useBalances()\n  const [isSubmitting, setSubmitting] = useState(false)\n  const [input, setInput] = useState('')\n  const [output, setOutput] = useState('')\n  const { from, setFrom, to, setTo, toggle } = useSwitchCurrencies('GBP', 'EUR')\n  const rate = useExchangeRate(from, to)\n\n  const clearInputs = () => {\n    setInput('')\n    setOutput('')\n  }\n\n  const isInvalid = (typeof input !== 'number' && input !== 0) || input > balances[from].amount\n\n  const submitExchange = () => {\n    if (!isInvalid) {\n      setSubmitting(true)\n      BalanceService\n        .exchange({ from, to, amount: input })\n        .then(refreshBalances)\n        .then(clearInputs)\n        .finally(() => setSubmitting(false))\n    }\n  }\n\n  return (\n    <Page path='/exchange'>\n      <Container>\n        <Link to='/'>\n          <Button type='ghost'>\n            <Icon type='left' />\n            Back\n          </Button>\n        </Link>\n        <Card>\n          {isLoadingBalances ? (\n            <Spin />\n          ) : (\n            <>\n              <CurrencyInput\n                currentCurrency={balances[from]}\n                value={input}\n                onValueChange={input => {\n                  if (typeof input === 'string') {\n                    clearInputs()\n                  } else {\n                    setInput(input)\n                    setOutput(formatNumber(rate * input))\n                  }\n                }}\n                onCurrencySelect={code => {\n                  setFrom(code)\n                  BalanceService\n                    .getRate({ from: code, to })\n                    .then(rate => {\n                      setOutput(formatNumber(rate * input))\n                    })\n                }}\n                currencies={balances}\n                other={to}\n              />\n\n              <CurrencySwap\n                onSwap={() => {\n                  toggle()\n                  BalanceService\n                    .getRate({ from: to, to: from })\n                    .then(rate => {\n                      setOutput(formatNumber(rate * input))\n                    })\n                }}\n              />\n\n              <CurrencyInput\n                currentCurrency={balances[to]}\n                value={output}\n                onValueChange={output => {\n                  if (typeof output === 'string') {\n                    clearInputs()\n                  } else {\n                    setOutput(output)\n                    setInput(formatNumber(output / rate))\n                  }\n                }}\n                onCurrencySelect={code => {\n                  setTo(code)\n                  BalanceService\n                    .getRate({ from, to: code })\n                    .then(rate => {\n                      setInput(formatNumber(output / rate))\n                    })\n                }}\n                currencies={balances}\n                other={from}\n              />\n\n              <ExchangeRate\n                from={balances[from]}\n                to={balances[to]}\n                rate={formatNumber(rate)}\n              />\n\n              <Row type='flex' justify='center'>\n                <Button\n                  type='primary'\n                  size='large'\n                  shape='round'\n                  onClick={submitExchange}\n                  loading={isSubmitting}\n                  disabled={isInvalid}\n                  style={{ maxWidth: 300, width: '100%' }}\n                >\n                  Swap\n                </Button>\n              </Row>\n            </>\n          )}\n        </Card>\n      </Container>\n    </Page>\n  )\n}\n","import { useState } from 'react'\n\nexport default function useSwitchCurrencies (currency0, currency1) {\n  const [from, setFrom] = useState(currency0)\n  const [to, setTo] = useState(currency1)\n\n  const toggle = () => {\n    setFrom(to)\n    setTo(from)\n  }\n\n  return { from, setFrom, to, setTo, toggle }\n}\n","import { useEffect, useState } from 'react'\nimport BalanceService from '../services/Balance'\n\nexport default function useExchangeRate (from, to) {\n  const [rate, setRate] = useState(null)\n\n  useEffect(() => {\n    BalanceService.getRate({ from, to }).then(setRate)\n  }, [from, to])\n\n  return rate\n}\n","import React from 'react'\nimport { BrowserRouter as Router } from 'react-router-dom'\nimport { GlobalStyles } from 'theme'\nimport { Dashboard, Exchange } from 'pages'\nimport { Header } from 'components'\nimport { BalanceContext, useBalanceProvider } from 'hooks/useBalances'\n\nfunction App () {\n  const balances = useBalanceProvider()\n\n  return (\n    <>\n      <GlobalStyles />\n      <BalanceContext.Provider value={balances}>\n        <Router basename='/cashswap'>\n          <Header />\n          <Exchange />\n          <Dashboard />\n        </Router>\n      </BalanceContext.Provider>\n    </>\n  )\n}\n\nexport default App\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n)\n\nexport function register (config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href)\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config)\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          )\n        })\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config)\n      }\n    })\n  }\n}\n\nfunction registerValidSW (swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing\n        if (installingWorker == null) {\n          return\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              )\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration)\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.')\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration)\n              }\n            }\n          }\n        }\n      }\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error)\n    })\n}\n\nfunction checkValidServiceWorker (swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type')\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload()\n          })\n        })\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config)\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      )\n    })\n}\n\nexport function unregister () {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister()\n    })\n  }\n}\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport 'normalize.css/normalize.css'\nimport 'antd/dist/antd.css'\nimport App from './App'\nimport * as serviceWorker from './serviceWorker'\n\nReactDOM.render(<App />, document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister()\n","module.exports = __webpack_public_path__ + \"static/media/logo.cc8307fe.svg\";"],"sourceRoot":""}